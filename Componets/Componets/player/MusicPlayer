
import React from 'react';
import { usePlayer } from './PlayerContext';
import { Play, Pause, SkipForward, SkipBack, Heart, Shuffle, Repeat, Repeat1, Volume2, Volume1, VolumeX } from 'lucide-react';
import { Slider } from "@/components/ui/slider";
import { Button } from "@/components/ui/button";

export default function MusicPlayer() {
  const { 
    currentSong, 
    isPlaying, 
    progress, 
    volume,
    isShuffle,
    isRepeat,
    togglePlay, 
    playNext, 
    playPrev, 
    seek, 
    setVolume,
    setIsShuffle,
    setIsRepeat,
    audioRef
  } = usePlayer();

  if (!currentSong) return null;

  const formatTime = (seconds) => {
    if (isNaN(seconds)) return '0:00';
    const minutes = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
  };

  const handleRepeatToggle = () => {
    if (isRepeat === 'none') setIsRepeat('all');
    else if (isRepeat === 'all') setIsRepeat('one');
    else setIsRepeat('none');
  }

  const getVolumeIcon = () => {
    if (volume === 0) return <VolumeX className="w-5 h-5" />;
    if (volume < 0.5) return <Volume1 className="w-5 h-5" />;
    return <Volume2 className="w-5 h-5" />;
  }

  return (
    <div className="fixed bottom-0 left-0 right-0 h-24 glass-effect border-t border-white/10 p-4 z-50">
      <div className="max-w-screen-2xl mx-auto flex items-center justify-between h-full">
        {/* Song Info */}
        <div className="w-1/4 flex items-center gap-4">
          <div className="w-16 h-16 rounded-lg bg-gradient-to-br from-purple-600 to-pink-600 flex items-center justify-center overflow-hidden">
            {currentSong.artwork_url ? (
                <img src={currentSong.artwork_url} alt={currentSong.album} className="w-full h-full object-cover" />
            ) : (
                <span className="text-2xl">ðŸŽµ</span>
            )}
          </div>
          <div>
            <h4 className="font-semibold">{currentSong.title}</h4>
            <p className="text-gray-400 text-sm">{currentSong.artist}</p>
          </div>
          <Button size="icon" variant="ghost" className="hover:bg-white/10">
            <Heart className="w-5 h-5" />
          </Button>
        </div>

        {/* Player Controls */}
        <div className="w-1/2 flex flex-col items-center gap-2">
          <div className="flex items-center gap-4">
            <Button size="icon" variant="ghost" className={`hover:bg-white/10 ${isShuffle ? 'text-purple-400' : ''}`} onClick={() => setIsShuffle(!isShuffle)}>
              <Shuffle className="w-5 h-5" />
            </Button>
            <Button size="icon" variant="ghost" className="hover:bg-white/10" onClick={playPrev}>
              <SkipBack className="w-5 h-5" />
            </Button>
            <Button 
              size="icon" 
              className="w-12 h-12 rounded-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
              onClick={togglePlay}
            >
              {isPlaying ? <Pause className="w-6 h-6" /> : <Play className="w-6 h-6 ml-1" />}
            </Button>
            <Button size="icon" variant="ghost" className="hover:bg-white/10" onClick={playNext}>
              <SkipForward className="w-5 h-5" />
            </Button>
            <Button size="icon" variant="ghost" className={`hover:bg-white/10 ${isRepeat !== 'none' ? 'text-purple-400' : ''}`} onClick={handleRepeatToggle}>
              {isRepeat === 'one' ? <Repeat1 className="w-5 h-5" /> : <Repeat className="w-5 h-5" />}
            </Button>
          </div>
          <div className="w-full flex items-center gap-3">
            <span className="text-xs text-gray-400">{formatTime(audioRef?.currentTime || 0)}</span>
            <Slider
              value={[progress || 0]}
              onValueChange={(value) => seek(value[0])}
              className="w-full"
            />
            <span className="text-xs text-gray-400">{formatTime(audioRef?.duration || 0)}</span>
          </div>
        </div>

        {/* Volume & Other Controls */}
        <div className="w-1/4 flex items-center justify-end gap-3">
          {getVolumeIcon()}
          <Slider
            value={[volume * 100]}
            onValueChange={(value) => setVolume(value[0] / 100)}
            className="w-32"
          />
        </div>
      </div>
    </div>
  );
}
