import React, { useState, useEffect } from "react";
import { Play, Pause, Heart, MoreHorizontal, Clock, PlusCircle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { Playlist, Song } from "@/entities/all";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

export default function SongList({ songs, onPlaySong, currentSong, isPlaying, isLoading }) {
  const [playlists, setPlaylists] = useState([]);

  useEffect(() => {
    loadPlaylists();
  }, []);

  const loadPlaylists = async () => {
    const data = await Playlist.list();
    setPlaylists(data);
  };

  const addSongToPlaylist = async (playlistId, songId) => {
    try {
        const playlist = await Playlist.get(playlistId);
        if(!playlist.song_ids.includes(songId)) {
            const updatedSongIds = [...playlist.song_ids, songId];
            await Playlist.update(playlistId, { song_ids: updatedSongIds });
        }
    } catch (error) {
        console.error("Failed to add song to playlist", error);
    }
  }

  if (isLoading) {
    return (
      <div className="glass-effect rounded-2xl overflow-hidden">
        <div className="p-4 space-y-4">
          {Array(8).fill(0).map((_, i) => (
            <div key={i} className="flex items-center gap-4">
              <Skeleton className="w-12 h-12 rounded" />
              <div className="flex-1">
                <Skeleton className="h-4 w-48 mb-2" />
                <Skeleton className="h-3 w-32" />
              </div>
              <Skeleton className="h-3 w-12" />
            </div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="glass-effect rounded-2xl overflow-hidden">
      {/* Header */}
      <div className="grid grid-cols-12 gap-4 p-4 border-b border-white/10 text-gray-400 text-sm font-medium">
        <div className="col-span-5 flex items-center gap-4">
          <span>#</span>
          <span>TITLE</span>
        </div>
        <div className="col-span-3">ALBUM</div>
        <div className="col-span-2">GENRE</div>
        <div className="col-span-2 flex justify-end">
          <Clock className="w-4 h-4" />
        </div>
      </div>

      {/* Songs */}
      <div className="p-2">
        {songs.map((song, index) => (
          <div
            key={song.id}
            className={`group grid grid-cols-12 gap-4 p-3 rounded-lg hover:bg-white/5 transition-all duration-300 cursor-pointer ${
              currentSong?.id === song.id ? "bg-white/10" : ""
            }`}
            onClick={() => onPlaySong(song)}
          >
            <div className="col-span-5 flex items-center gap-4">
              <div className="w-8 flex items-center justify-center">
                <span className="group-hover:hidden text-gray-400">{index + 1}</span>
                <div className="hidden group-hover:block">
                  {currentSong?.id === song.id && isPlaying ? (
                    <Pause className="w-4 h-4" />
                  ) : (
                    <Play className="w-4 h-4 ml-0.5" />
                  )}
                </div>
              </div>
              <div className="w-12 h-12 rounded bg-gradient-to-br from-purple-600 to-pink-600 flex items-center justify-center">
                {song.artwork_url ? (
                  <img src={song.artwork_url} alt="" className="w-full h-full object-cover rounded" />
                ) : (
                  <span>ðŸŽµ</span>
                )}
              </div>
              <div className="min-w-0">
                <h4 className="font-semibold truncate">{song.title}</h4>
                <p className="text-gray-400 text-sm truncate">{song.artist}</p>
              </div>
            </div>
            <div className="col-span-3 flex items-center">
              <span className="text-gray-400 truncate">{song.album || "Unknown Album"}</span>
            </div>
            <div className="col-span-2 flex items-center">
              <span className="text-gray-400 truncate">{song.genre || "Unknown"}</span>
            </div>
            <div className="col-span-2 flex items-center justify-end">
              <div className="flex items-center gap-2">
                <span className="text-gray-400 text-sm opacity-0 group-hover:opacity-100">
                  {Math.floor((song.duration || 180) / 60)}:{String((song.duration || 180) % 60).padStart(2, '0')}
                </span>
                <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                        <Button size="icon" variant="ghost" className="opacity-0 group-hover:opacity-100 w-8 h-8" onClick={e => e.stopPropagation()}>
                            <MoreHorizontal className="w-4 h-4" />
                        </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent onClick={e => e.stopPropagation()}>
                        <DropdownMenuLabel>Actions</DropdownMenuLabel>
                        <DropdownMenuItem><Heart className="w-4 h-4 mr-2" /> Add to Liked</DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuLabel>Add to Playlist</DropdownMenuLabel>
                        {playlists.map(p => (
                            <DropdownMenuItem key={p.id} onClick={() => addSongToPlaylist(p.id, song.id)}>
                                <PlusCircle className="w-4 h-4 mr-2" />
                                {p.name}
                            </DropdownMenuItem>
                        ))}
                    </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}