
import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { Playlist, Song } from '@/entities/all';
import { Music, Play, Pause, Clock, MoreHorizontal, Trash2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { usePlayer } from '../components/player/PlayerContext'; // Corrected import path

export default function PlaylistPage() {
    const [playlist, setPlaylist] = useState(null);
    const [songs, setSongs] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const location = useLocation();
    const { playSong, currentSong, isPlaying } = usePlayer();

    useEffect(() => {
        const params = new URLSearchParams(location.search);
        const id = params.get('id');
        if (id) {
            loadPlaylistData(id);
        }
    }, [location]);

    const loadPlaylistData = async (id) => {
        setIsLoading(true);
        try {
            const playlistData = await Playlist.get(id);
            setPlaylist(playlistData);
            if (playlistData && playlistData.song_ids && playlistData.song_ids.length > 0) {
                const songData = await Song.filter({ id: { '$in': playlistData.song_ids } });
                // Preserve order from song_ids
                const orderedSongs = playlistData.song_ids.map(songId => songData.find(s => s.id === songId)).filter(Boolean);
                setSongs(orderedSongs);
            } else {
                setSongs([]);
            }
        } catch (error) {
            console.error("Error loading playlist data:", error);
        } finally {
            setIsLoading(false);
        }
    };

    const handlePlayPlaylist = () => {
        if(songs.length > 0) {
            playSong(songs[0], songs);
        }
    }

    const handlePlaySong = (song) => {
        playSong(song, songs);
    }

    const removeSongFromPlaylist = async (songId) => {
        if (!playlist) return;
        const updatedSongIds = playlist.song_ids.filter(id => id !== songId);
        try {
            await Playlist.update(playlist.id, { song_ids: updatedSongIds });
            setSongs(songs.filter(s => s.id !== songId));
            setPlaylist({...playlist, song_ids: updatedSongIds});
        } catch (error) {
            console.error("Failed to remove song:", error);
        }
    }

    if (isLoading) {
        return (
            <div className="p-6">
                <div className="flex flex-col md:flex-row gap-8 mb-8">
                    <Skeleton className="w-full md:w-64 h-64 rounded-xl" />
                    <div className="flex-1 space-y-4">
                        <Skeleton className="h-10 w-3/4" />
                        <Skeleton className="h-6 w-1/2" />
                        <Skeleton className="h-4 w-1/4" />
                    </div>
                </div>
            </div>
        )
    }

    if (!playlist) {
        return <div className="p-6 text-center">Playlist not found.</div>
    }

    return (
        <div className="p-6">
            <div className="flex flex-col md:flex-row gap-8 mb-8">
                <div className="w-full md:w-64 h-64 rounded-xl shadow-lg glass-effect flex-shrink-0">
                    {playlist.cover_url ? (
                        <img src={playlist.cover_url} alt={playlist.name} className="w-full h-full object-cover rounded-xl" />
                    ) : (
                         <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-purple-900 to-pink-900 rounded-xl">
                            <Music className="w-1/2 h-1/2 text-white/20" />
                        </div>
                    )}
                </div>
                <div className="flex-1 flex flex-col justify-end">
                    <p className="text-sm font-bold text-purple-400">PLAYLIST</p>
                    <h1 className="text-5xl lg:text-7xl font-bold my-4">{playlist.name}</h1>
                    <p className="text-gray-400 mb-4">{playlist.description}</p>
                    <p className="text-sm text-gray-300">{songs.length} songs</p>
                    <div className="mt-6">
                        <Button 
                            onClick={handlePlayPlaylist} 
                            className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 glow-purple rounded-full px-8 py-3"
                        >
                            <Play className="w-5 h-5 mr-2" /> Play
                        </Button>
                    </div>
                </div>
            </div>

            {/* Song List */}
             <div className="glass-effect rounded-2xl overflow-hidden">
                <div className="grid grid-cols-12 gap-4 p-4 border-b border-white/10 text-gray-400 text-sm font-medium">
                    <div className="col-span-6 flex items-center gap-4">
                        <span>#</span>
                        <span>TITLE</span>
                    </div>
                    <div className="col-span-4">ALBUM</div>
                    <div className="col-span-2 flex justify-end">
                        <Clock className="w-4 h-4" />
                    </div>
                </div>
                <div className="p-2">
                    {songs.map((song, index) => (
                    <div
                        key={song.id}
                        className={`group grid grid-cols-12 gap-4 p-3 rounded-lg hover:bg-white/5 transition-all duration-300 cursor-pointer ${
                        currentSong?.id === song.id ? "bg-white/10" : ""
                        }`}
                        onClick={() => handlePlaySong(song)}
                    >
                        <div className="col-span-6 flex items-center gap-4">
                        <div className="w-8 flex items-center justify-center">
                            <span className="group-hover:hidden text-gray-400">{index + 1}</span>
                            <div className="hidden group-hover:block">
                            {currentSong?.id === song.id && isPlaying ? (
                                <Pause className="w-4 h-4" />
                            ) : (
                                <Play className="w-4 h-4 ml-0.5" />
                            )}
                            </div>
                        </div>
                        <div className="w-12 h-12 rounded bg-gradient-to-br from-purple-600 to-pink-600 flex items-center justify-center">
                            {song.artwork_url ? (
                            <img src={song.artwork_url} alt="" className="w-full h-full object-cover rounded" />
                            ) : (
                            <span>ðŸŽµ</span>
                            )}
                        </div>
                        <div className="min-w-0">
                            <h4 className="font-semibold truncate">{song.title}</h4>
                            <p className="text-gray-400 text-sm truncate">{song.artist}</p>
                        </div>
                        </div>
                        <div className="col-span-4 flex items-center">
                        <span className="text-gray-400 truncate">{song.album || "Unknown Album"}</span>
                        </div>
                        <div className="col-span-2 flex items-center justify-end">
                        <div className="flex items-center gap-2">
                            <Button size="icon" variant="ghost" className="opacity-0 group-hover:opacity-100 w-8 h-8" onClick={(e) => {e.stopPropagation(); removeSongFromPlaylist(song.id);}}>
                                <Trash2 className="w-4 h-4 text-red-400" />
                            </Button>
                            <span className="text-gray-400 text-sm">
                            {Math.floor((song.duration || 180) / 60)}:{String((song.duration || 180) % 60).padStart(2, '0')}
                            </span>
                        </div>
                        </div>
                    </div>
                    ))}
                    {songs.length === 0 && (
                        <div className="text-center p-8 text-gray-400">
                            This playlist is empty. Add some songs from your library!
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}
