
import React, { useState, useEffect } from "react";
import { Song } from "@/entities/all";
import { Grid, List, Search } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { usePlayer } from "../components/player/PlayerContext";

import SongGrid from "../components/library/SongGrid";
import SongList from "../components/library/SongList";

export default function Library() {
  const [songs, setSongs] = useState([]);
  const [filteredSongs, setFilteredSongs] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [viewMode, setViewMode] = useState("grid");
  const [searchQuery, setSearchQuery] = useState("");
  const [sortBy, setSortBy] = useState("-created_date");
  const { playSong, currentSong, isPlaying } = usePlayer();

  useEffect(() => {
    loadSongs();
  }, [sortBy]);

  useEffect(() => {
    filterSongs();
  }, [songs, searchQuery]);

  const loadSongs = async () => {
    setIsLoading(true);
    try {
      const data = await Song.list(sortBy);
      setSongs(data);
      setFilteredSongs(data); // Also set filtered songs initially
    } catch (error) {
      console.error("Error loading songs:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const filterSongs = () => {
    if (!searchQuery.trim()) {
      setFilteredSongs(songs);
      return;
    }

    const filtered = songs.filter(song =>
      song.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      song.artist?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      song.album?.toLowerCase().includes(searchQuery.toLowerCase())
    );
    setFilteredSongs(filtered);
  };

  const handlePlaySong = (song) => {
    playSong(song, filteredSongs);
  };

  return (
    <div className="p-6">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Your Library</h1>
        <p className="text-gray-400">Discover and organize your music collection</p>
      </div>

      {/* Controls */}
      <div className="flex flex-col lg:flex-row gap-4 mb-8">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
          <Input
            placeholder="Search your music..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 glass-effect border-white/10 bg-white/5"
          />
        </div>
        <div className="flex gap-3">
          <Select value={sortBy} onValueChange={setSortBy}>
            <SelectTrigger className="w-40 glass-effect border-white/10">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="-created_date">Recently Added</SelectItem>
              <SelectItem value="title">Title A-Z</SelectItem>
              <SelectItem value="artist">Artist A-Z</SelectItem>
              <SelectItem value="-release_year">Newest</SelectItem>
            </SelectContent>
          </Select>
          <div className="flex glass-effect rounded-lg p-1">
            <Button
              size="icon"
              variant={viewMode === "grid" ? "default" : "ghost"}
              onClick={() => setViewMode("grid")}
              className="w-8 h-8"
            >
              <Grid className="w-4 h-4" />
            </Button>
            <Button
              size="icon"
              variant={viewMode === "list" ? "default" : "ghost"}
              onClick={() => setViewMode("list")}
              className="w-8 h-8"
            >
              <List className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* Song Display */}
      {viewMode === "grid" ? (
        <SongGrid
          songs={filteredSongs}
          onPlaySong={handlePlaySong}
          currentSong={currentSong}
          isPlaying={isPlaying}
          isLoading={isLoading}
        />
      ) : (
        <SongList
          songs={filteredSongs}
          onPlaySong={handlePlaySong}
          currentSong={currentSong}
          isPlaying={isPlaying}
          isLoading={isLoading}
        />
      )}
    </div>
  );
}
